{"version":3,"file":"react-query-hydration.min.mjs","sources":["../../src/hydration/hydration.ts","../../src/hydration/react.tsx"],"sourcesContent":["import type { Query, QueryCache, QueryKey } from 'react-query'\n\nexport interface DehydratedQueryConfig {\n  cacheTime?: number\n}\n\nexport interface DehydratedQuery {\n  queryKey: QueryKey\n  data?: unknown\n  updatedAt: number\n  config: DehydratedQueryConfig\n}\n\nexport interface DehydratedState {\n  queries: Array<DehydratedQuery>\n}\n\nexport type ShouldDehydrateFunction = <TResult, TError = unknown>(\n  query: Query<TResult, TError>\n) => boolean\n\nexport interface DehydrateConfig {\n  shouldDehydrate?: ShouldDehydrateFunction\n}\n\n// Most config is not dehydrated but instead meant to configure again when\n// consuming the de/rehydrated data, typically with useQuery on the client.\n// Sometimes it might make sense to prefetch data on the server and include\n// in the html-payload, but not consume it on the initial render.\nfunction dehydrateQuery<TResult, TError = unknown>(\n  query: Query<TResult, TError>\n): DehydratedQuery {\n  return {\n    config: {\n      cacheTime: query.cacheTime,\n    },\n    data: query.state.data,\n    queryKey: query.queryKey,\n    updatedAt: query.state.updatedAt,\n  }\n}\n\nfunction defaultShouldDehydrate<TResult, TError>(\n  query: Query<TResult, TError>\n) {\n  return query.state.status === 'success'\n}\n\nexport function dehydrate(\n  queryCache: QueryCache,\n  dehydrateConfig?: DehydrateConfig\n): DehydratedState {\n  const config = dehydrateConfig || {}\n  const shouldDehydrate = config.shouldDehydrate || defaultShouldDehydrate\n  const queries: DehydratedQuery[] = []\n\n  queryCache.getQueries().forEach(query => {\n    if (shouldDehydrate(query)) {\n      queries.push(dehydrateQuery(query))\n    }\n  })\n\n  return { queries }\n}\n\nexport function hydrate(\n  queryCache: QueryCache,\n  dehydratedState: unknown\n): void {\n  if (typeof dehydratedState !== 'object' || dehydratedState === null) {\n    return\n  }\n\n  const queries = (dehydratedState as DehydratedState).queries || []\n\n  queries.forEach(dehydratedQuery => {\n    const resolvedConfig = queryCache.getResolvedQueryConfig(\n      dehydratedQuery.queryKey,\n      dehydratedQuery.config\n    )\n\n    let query = queryCache.getQueryByHash(resolvedConfig.queryHash)\n\n    // Do not hydrate if an existing query exists with newer data\n    if (query && query.state.updatedAt >= dehydratedQuery.updatedAt) {\n      return\n    }\n\n    if (!query) {\n      query = queryCache.createQuery(resolvedConfig)\n    }\n\n    query.setData(dehydratedQuery.data, {\n      updatedAt: dehydratedQuery.updatedAt,\n    })\n  })\n}\n","import React from 'react'\nimport { useQueryCache } from 'react-query'\n\nimport { hydrate } from './hydration'\n\nexport function useHydrate(queries: unknown) {\n  const queryCache = useQueryCache()\n\n  // Running hydrate again with the same queries is safe,\n  // it wont overwrite or initialize existing queries,\n  // relying on useMemo here is only a performance optimization\n  React.useMemo(() => {\n    if (queries) {\n      hydrate(queryCache, queries)\n    }\n    return undefined\n  }, [queryCache, queries])\n}\n\nexport interface HydrateProps {\n  state?: unknown\n}\n\nexport const Hydrate: React.FC<HydrateProps> = ({ state, children }) => {\n  useHydrate(state)\n  return children as React.ReactElement<any>\n}\n"],"names":["defaultShouldDehydrate","query","state","status","dehydrate","queryCache","dehydrateConfig","shouldDehydrate","queries","getQueries","forEach","push","config","cacheTime","data","queryKey","updatedAt","dehydrateQuery","hydrate","dehydratedState","dehydratedQuery","resolvedConfig","getResolvedQueryConfig","getQueryByHash","queryHash","createQuery","setData","useHydrate","useQueryCache","React","useMemo","Hydrate","children"],"mappings":"iEA0CA,SAASA,EACPC,SAE8B,YAAvBA,EAAMC,MAAMC,OAGd,SAASC,EACdC,EACAC,OAGMC,GADSD,GAAmB,IACHC,iBAAmBP,EAC5CQ,EAA6B,UAEnCH,EAAWI,aAAaC,SAAQ,SAAAT,GAC1BM,EAAgBN,IAClBO,EAAQG,KA7Bd,SACEV,SAEO,CACLW,OAAQ,CACNC,UAAWZ,EAAMY,WAEnBC,KAAMb,EAAMC,MAAMY,KAClBC,SAAUd,EAAMc,SAChBC,UAAWf,EAAMC,MAAMc,WAoBRC,CAAehB,OAIzB,CAAEO,QAAAA,GAGJ,SAASU,EACdb,EACAc,GAE+B,iBAApBA,GAAoD,OAApBA,IAI1BA,EAAoCX,SAAW,IAExDE,SAAQ,SAAAU,OACRC,EAAiBhB,EAAWiB,uBAChCF,EAAgBL,SAChBK,EAAgBR,QAGdX,EAAQI,EAAWkB,eAAeF,EAAeG,WAGjDvB,GAASA,EAAMC,MAAMc,WAAaI,EAAgBJ,YAIjDf,IACHA,EAAQI,EAAWoB,YAAYJ,IAGjCpB,EAAMyB,QAAQN,EAAgBN,KAAM,CAClCE,UAAWI,EAAgBJ,gBCxF1B,SAASW,EAAWnB,OACnBH,EAAauB,IAKnBC,EAAMC,SAAQ,WACRtB,GACFU,EAAQb,EAAYG,KAGrB,CAACH,EAAYG,QAOLuB,EAAkC,gBAAG7B,IAAAA,MAAO8B,IAAAA,gBACvDL,EAAWzB,GACJ8B"}